---
name: Build MythTV all variants

#
# This workflow attempts to compile MythTV across a large
# set of variants (including non-core ones).
#
# Note that in theory we should use github cache for ccache
# in order to (substantially) improve build time, but as
# github limits the total size of cache files to 10GB,
# and for MythTV ccache to be useful it needs to be rather
# large, and we are building a lot of variants, the github
# cache ends up being too small to be helpful, so we do
# not use it for this workflow.
#
# We test both the master and the current fixes branches,
# as there can be divergence in their requirements.
#
# This set of jobs takes a number of hours, as due
# to the number of variants the github cache (used
# for the compiler ccache) is not available, and
# because one cannot run more than 20 jobs per repo
# for the free github workflow service.
#

on:                # yamllint disable-line rule:truthy
  workflow_run:
    workflows: ["Build MythTV core variants"]
    types:
      - completed

permissions:
  contents: read

jobs:
  build-mythtv-linux:
    name: Building MythTV ${{ matrix.branch.desc }} on ${{ matrix.container.desc }}

    runs-on: ubuntu-latest

    env:
      TZ: Etc/UTC
      MYTHTV_CONFIG_PREFIX: ${{ github.workspace }}/build/install
      MYTHTV_CONFIG_EXTRA:
      MYTHTV_REPO: MythTV/mythtv

    strategy:
      max-parallel: 10
      matrix:
        container:
          # Ubuntu group
          - desc: 'Ubuntu 20.04 LTS (Focal Fossa)'
            image: 'ubuntu:20.04'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)'
            image: 'ubuntu:22.04'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Ubuntu 22.10 (Kinetic Kudu)'
            image: 'ubuntu:22.10'
            ansibleopts: '--limit localhost'
            configureopts: ''

          # Debian group
          - desc: 'Debian 11 (Bullseye)'
            image: 'debian:bullseye'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Debian 12 (Bookworm)'
            image: 'debian:bookworm'
            ansibleopts: '--limit localhost'
            configureopts: ''

          # Fedora group
          - desc: 'Fedora 35'
            image: 'fedora:35'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Fedora 36'
            image: 'fedora:36'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Fedora 37'
            image: 'fedora:37'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Fedora Rawhide'
            image: 'fedora:rawhide'
            ansibleopts: '--limit localhost'
            configureopts: ''

          # CentOS group
          - desc: 'CentOS 8 Stream'
            image: 'quay.io/centos/centos:stream8'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'CentOS 9 Stream'
            image: 'quay.io/centos/centos:stream9'
            ansibleopts: '--limit localhost'
            configureopts: ''

          # Rocky Linux group
          - desc: 'Rocky Linux 8'
            image: 'rockylinux:8'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'Rocky Linux 9'
            image: 'rockylinux:9'
            ansibleopts: '--limit localhost'
            configureopts: ''

          # openSUSE group
          - desc: 'openSUSE Tumbleweed'
            image: 'opensuse/tumbleweed:latest'
            ansibleopts: '--limit localhost'
            configureopts: ''
          - desc: 'openSUSE Leap'
            image: 'opensuse/leap:latest'
            ansibleopts: '--limit localhost'
            configureopts: ''

          # Arch Linux group
          - desc: 'Arch Linux'
            image: 'archlinux:latest'
            ansibleopts: '--limit localhost'
            configureopts: ''

        branch:
          - desc: 'MythTV master'
            repository: 'MythTV/mythtv'
            ref: 'master'
            ansibleopts: ''
            configureopts: ''
          - desc: 'MythTV fixes/32'
            repository: 'MythTV/mythtv'
            ref: 'fixes/32'
            ansibleopts: ''
            configureopts: ''

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: Debian/Ubuntu OS update
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update -y
          apt upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install ansible apt-utils -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat OS - add EPEL repo for EL linux (for ansible)
        run: dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS install ansible
        run: dnf install ansible dnf-plugins-core -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: OpenSUSE OS update
        run: zypper update -y
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: OpenSUSE OS install ansible
        run: zypper install -y ansible tar gzip
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: ArchLinux OS update
        run: pacman --noconfirm -Syu
        if: env.OS_RELEASE_ID == 'arch'

      - name: ArchLinux OS install ansible
        run: pacman --noconfirm -Sy ansible
        if: env.OS_RELEASE_ID == 'arch'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ansible-playbook ${{ matrix.container.ansibleopts }} ${{ matrix.branch.ansibleopts }} mythtv.yml

      - name: OpenSUSE OS remove valgrind-devel (fix for broken MythTV compilation)
        run: rpm --erase --nodeps valgrind-devel
        if: env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.branch.repository }}
          ref: ${{ matrix.branch.ref }}
          path: mythtv

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }} ${{ env.MYTHTV_CONFIG_EXTRA }} ${{ matrix.container.configureopts }} ${{ matrix.branch.configureopts }}

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }}

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: Install plugins
        working-directory: mythtv/mythplugins
        run: make install

  build-mythtv-macOS:
    name: Building MythTV ${{ matrix.branch.desc }} on ${{ matrix.macOS.desc }} using ${{ matrix.pkgmgr.desc }}

    env:
      MACPORTS_VERSION: 2.7.2
      TZ: Etc/UTC
      MYTHTV_CONFIG_PREFIX: ${{ github.workspace }}/build/install
      MYTHTV_CONFIG_EXTRA:

    strategy:
      max-parallel: 4
      matrix:
        macOS:
          - desc: 'macOS 11 (Big Sur)'
            os: 'macos-11'
            ansibleopts: '--limit localhost'
            configureopts: ''
            portspkg: '11-BigSur'
          - desc: 'macOS 12 (Monterey)'
            os: 'macos-12'
            ansibleopts: '--limit localhost'
            configureopts: ''
            portspkg: '12-Monterey'

        pkgmgr:
          - desc: 'macports'
            mgr: 'macports'
            ansibleopts: ''
            configureopts: '--extra-cflags="-I/opt/local/include" --extra-cxxflags="-I/opt/local/include" --extra-ldflags="-L/opt/local/lib" --qmake="/opt/local/libexec/qt5/bin/qmake"'
          ## Homebrew ansible tasks are still a work in progress
          # desc: 'homebrew'
          # mgr: 'homebrew'
          # ansibleopts: ''
          # configureopts: '--extra-cflags="-I/usr/local/include" --extra-cxxflags="-I/usr/local/include" --extra-ldflags="-L/usr/local/lib"'

        branch:
          - desc: 'MythTV master'
            repository: 'MythTV/mythtv'
            ref: 'master'
            ansibleopts: ''
            configureopts: ''
          - desc: 'MythTV fixes/32'
            repository: 'MythTV/mythtv'
            ref: 'fixes/32'
            ansibleopts: ''
            configureopts: ''

      fail-fast: false

    runs-on: ${{ matrix.macOS.os }}

    steps:
      - name: Uninstall homebrew if using macports (package conflicts)
        run: /bin/bash -c "$(NONINTERACTIVE=1 curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        if: matrix.pkgmgr.mgr == 'macports'

      - name: Install macports if using macports
        run: |
          curl --location https://github.com/macports/macports-base/releases/download/v${{ env.MACPORTS_VERSION }}/MacPorts-${{ env.MACPORTS_VERSION }}-${{ matrix.macOS.portspkg }}.pkg --output MacPorts.pkg
          sudo installer -pkg ./MacPorts.pkg -target /
          echo "PATH=/opt/local/bin:/opt/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkgmgr.mgr == 'macports'

      - name: Adjust path for homebrew
        run: echo "PATH=/usr/local/bin:/usr/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkgmgr.mgr == 'homebrew'

      - name: Install ansible for macports
        run: |
          sudo port install py310-ansible
          sudo port select --set ansible py310-ansible
        if: matrix.pkgmgr.mgr == 'macports'

      - name: Install ansible for homebrew
        run: brew install ansible
        if: matrix.pkgmgr.mgr == 'homebrew'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          path: ansible

      - name: Run ansible to install build requirements for macports
        working-directory: ansible
        run: sudo ansible-playbook ${{ matrix.macOS.ansibleopts }} ${{ matrix.pkgmgr.ansibleopts }} ${{ matrix.branch.ansibleopts }} mythtv.yml
        if: matrix.pkgmgr.mgr == 'macports'

      - name: Run ansible to install build requirements for homebrew
        working-directory: ansible
        run: ansible-playbook ${{ matrix.macOS.ansibleopts }} ${{ matrix.pkgmgr.ansibleopts }} ${{ matrix.branch.ansibleopts }} mythtv.yml
        if: matrix.pkgmgr.mgr == 'homebrew'

      - name: Force qt5 for homebrew
        run: brew link qt5 --force
        if: matrix.pkgmgr.mgr == 'homebrew'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.branch.repository }}
          ref: ${{ matrix.branch.ref }}
          path: mythtv

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }} ${{ env.MYTHTV_CONFIG_EXTRA }} ${{ matrix.macOS.configureopts }} ${{ matrix.pkgmgr.configureopts }} ${{ matrix.branch.configureopts }}

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }}

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: Install plugins
        working-directory: mythtv/mythplugins
        run: make install
